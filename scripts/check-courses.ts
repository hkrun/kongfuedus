import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkCourses() {
  console.log('üîç Ê£ÄÊü•Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑËØæÁ®ãÊï∞ÊçÆ...');
  
  try {
    // Ëé∑ÂèñÊâÄÊúâËØæÁ®ã
    const courses = await prisma.course.findMany({
      orderBy: {
        createdAt: 'asc'
      }
    });
    
    console.log(`üìä Êï∞ÊçÆÂ∫ì‰∏≠ÂÖ±Êúâ ${courses.length} Èó®ËØæÁ®ã`);
    
    if (courses.length === 0) {
      console.log('‚ùå Êï∞ÊçÆÂ∫ì‰∏≠Ê≤°ÊúâÊâæÂà∞‰ªª‰ΩïËØæÁ®ã');
      return;
    }
    
    // ÊòæÁ§∫ËØæÁ®ãËØ¶ÊÉÖ
    console.log('\nüìã ËØæÁ®ãÂàóË°®:');
    courses.forEach((course, index) => {
      console.log(`${index + 1}. ${course.title}`);
      console.log(`   ID: ${course.id}`);
      console.log(`   ÂàÜÁ±ª: ${course.category}`);
      console.log(`   ËÆ≤Â∏à: ${course.instructor}`);
      console.log(`   ËØÑÂàÜ: ${course.rating}`);
      console.log(`   Â≠¶ÁîüÊï∞: ${course.students}`);
      console.log(`   ÂàõÂª∫Êó∂Èó¥: ${course.createdAt.toLocaleString()}`);
      console.log('');
    });
    
    // ÊåâÂàÜÁ±ªÁªüËÆ°
    const categoryStats = courses.reduce((acc, course) => {
      acc[course.category] = (acc[course.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà ÊåâÂàÜÁ±ªÁªüËÆ°:');
    Object.entries(categoryStats).forEach(([category, count]) => {
      console.log(`   ${category}: ${count} Èó®ËØæÁ®ã`);
    });
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•ËØæÁ®ãÊï∞ÊçÆÂ§±Ë¥•:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  checkCourses()
    .then(() => {
      console.log('‚úÖ Ê£ÄÊü•ÂÆåÊàê');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error);
      process.exit(1);
    });
}

export { checkCourses };
